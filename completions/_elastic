#compdef elastic

__elastic_commands() {
  local -a commands
  commands=(
    'alias:manage aliases'
    'count:make count request'
    'curl:make arbitrary HTTP request'
    'document:manage documents'
    'index:manage indices'
    'search:make search request'
  )
  _describe -t elastic-commands 'commands' commands
}

_elastic_alias() {
  local curcontext=$curcontext state line ret=1
  local opts="$1"

  _arguments -C \
    ': :->subcommand' \
    '*:: :->args' && ret=0

  case "$state" in
    subcommand)
      local -a subcommands
      subcommands=(
        'add:add alias to index'
        'delete:delete index alias'
        'get:get specified alias'
        'list:list all aliases'
        'switch:move alias from on index to another'
      )
      _describe -t elastic-alias-subcommands 'subcommands' subcommands && ret=0
      ;;
    args)
      local subcommand="${line[1]//-/_}"
      local completion_func="_elastic_${command}_${subcommand}"

      curcontext="${curcontext%:*}-${subcommand}:${curcontext##*:}"
      _call_function ret "${completion_func}" "$opts"
      ;;
  esac

  return ret
}

_elastic_alias_add() {
  local curcontext=$curcontext state line
  local opts="$1"

  _arguments -C -O opts : \
    ': :_elastic__aliases $opts' \
    ': :_elastic__indices $opts' && return 0
}

_elastic_alias_delete() {
  local curcontext=$curcontext state line
  local opts="$1"

  _arguments -C -O opts : \
    ': :_elastic__aliases $opts' \
    ': :_elastic__indices $opts' && return 0
}

_elastic_alias_get() {
  local curcontext=$curcontext state line
  local opts="$1"

  _arguments -C -O opts : \
    ': :_elastic__aliases $opts' && return 0
}

_elastic_alias_switch() {
  local curcontext=$curcontext state line
  local opts="$1"

  _arguments -C -O opts : \
    ': :_elastic__aliases $opts' \
    ': :_elastic__indices $opts' \
    ': :_elastic__indices $opts' && return 0
}

_elastic_count() {
  local curcontext=$curcontext state line
  local opts="$1"

  _alternative -O opts : \
    'indices: :_elastic__indices $opts' \
    'aliases: :_elastic__aliases $opts' && return 0
}

_elastic_curl() {
  local -a subcommands
  subcommands=(
    'delete:make DELETE request'
    'get:make GET request'
    'post:make POST request'
    'put:make PUT request'
  )
  _describe -t elastic-curl-subcommands 'subcommands' subcommands && return 0
}

_elastic_document() {
  local curcontext=$curcontext state line ret=1
  local opts="$1"

  _arguments -C \
    ': :->subcommand' \
    '*:: :->args' && ret=0

  case "$state" in
    subcommand)
      local -a subcommands
      subcommands=(
        'delete:delete document from an index'
        'delete_by_query:delete matching documents from an index'
        'get:get document from an index'
        'index:create new document in an index with auto-generated id'
        'insert:create new document in an index'
        'mget:get multiple documents from an index'
        'reindex:copy documents from source to destination index'
        'update:update exisitng document in an index'
        'upsert:create new or replace existing document in an index'
      )
      _describe -t elastic-document-subcommands 'subcommands' subcommands && ret=0
      ;;
    args)
      local subcommand="${line[1]//-/_}"
      local completion_func
      curcontext="${curcontext%:*}-${subcommand}:${curcontext##*:}"

      case $subcommand in
        reindex)
          # No completions for reindex
          ret=1
          ;;
        *)
          _call_function ret "_elastic_${command}_any" "$opts"
          ;;
      esac
      ;;
  esac

  return ret
}

_elastic_document_any() {
  local curcontext=$curcontext state line
  local opts="$1"

  _alternative -O opts : \
    "indices: :_elastic__indices $opts" \
    "aliases: :_elastic__aliases $opts" && return 0
}

_elastic_index() {
  local curcontext=$curcontext state line ret=1
  local opts="$1"

  _arguments -C \
    ': :->subcommand' \
    '*:: :->args' && ret=0

  case "$state" in
    subcommand)
      local -a subcommands
      subcommands=(
        'clear_cache:clear cache of one or more indices'
        'close:close an index'
        'create:create a new index'
        'delete:delete exising index'
        'flush:flush one or more indices'
        'forcemerge:force a merge on the shards of one or more indices'
        'get:get information about one or more indices'
        'get_mapping:get mapping definitions for one or more indices'
        'get_settings:get setting information for one or more indices'
        'list:list all indices'
        'open:open a closed index'
        'refresh:refresh one or more indices'
        'update_mapping:add new fields to an existing index'
        'update_settings:change a dynamic index settings in real time'
      )
      _describe -t elastic-document-subcommands 'subcommands' subcommands && ret=0
      ;;
    args)
      local subcommand="${line[1]//-/_}"
      local completion_func
      curcontext="${curcontext%:*}-${subcommand}:${curcontext##*:}"

      case $subcommand in
        list)
          # No completions for list
          ret=1
          ;;
        *)
          _call_function ret "_elastic_${command}_any" "$opts"
          ;;
      esac
      ;;
  esac

  return ret
}

_elastic_index_any() {
  local curcontext=$curcontext state line
  local opts="$1"

  _alternative -O opts : \
    "indices: :_elastic__indices $opts" \
    "aliases: :_elastic__aliases $opts" && return 0
}

_elastic_search() {
  local curcontext=$curcontext state line
  local opts="$1"

  _alternative -O opts : \
    "indices: :_elastic__indices $opts" \
    "aliases: :_elastic__aliases $opts" && return 0
}

# helper functions
_elastic__indices() {
  local -a indices
  local opts=(${(s: :)1})

  _debug "[call] elastic $opts index list"

  indices=($(elastic $opts index list 2>/dev/null | awk '{print $3}'))
  _wanted indices expl 'indices' compadd -a indices
}

_elastic__aliases() {
  local -a aliases
  local opts=(${(s: :)1})

  _debug "[call] elastic $opts alias list"

  aliases=($(elastic $opts alias list 2>/dev/null | awk '{print $1}'))
  _wanted aliases expl 'aliases' compadd -a aliases
}

_debug() {
  if [[ -n $ELASTIC_DEBUG ]]; then
    print "[$(date '+%Y-%m-%d %H:%M:%S')] $@" >> /tmp/elastic-cli-completion-debug.log
  fi
}

# main completion function
_elastic() {
  local curcontext="$curcontext" state state_descr line expl
  local ret=1
  local -a opts

  _arguments -C -A "-*" : \
    '(-c --cluster)'{-c,--cluster}'[specify cluster URL]:cluster:' \
    '(-n --dry-run)'{-n,--dry-run}'[only print out curl commands, without running them]' \
    '(-h --help)'{-h,--help}'[show help]' \
    '(-v --verbose)'{-v,--verbose}'[print out curl commands to stderr]' \
    '(-V --version)'{-V,--version}'[show version]' \
    '(-): :->command' \
    '(-)*:: :->subcommand-or-args' && return 0

  if [[ -n $opt_args[--cluster] ]]; then
    local raw_cluster=$opt_args[--cluster]
    local expanded_cluster

    if [[ $raw_cluster == *\$* ]]; then
      expanded_cluster=${(e):-$raw_cluster}
    else
      expanded_cluster=$raw_cluster
    fi

    opts+=("--cluster $expanded_cluster")
  fi

  case "$state" in
    command)
      __elastic_commands && return 0
      ;;
    subcommand-or-args)
      local command="${line[1]//-/_}"

      # change context to e.g. elastic-alias
      curcontext="${curcontext%:*}-${command}:${curcontext##*:}"

      local completion_func="_elastic_${command}"
      _call_function ret "${completion_func}" "${(j: :)opts}" && return ret

      return 1
      ;;
  esac
}

_elastic "$@"
